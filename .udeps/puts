{:name "puts", :body "(defn puts\n  \"Print a colored map\"\n  ([data]\n   (println (puts data {} {})))\n\n  ([data user-colors]\n   (println (puts data user-colors {})))\n\n  ([data user-colors {:keys [indent] :or {indent 0}}]\n   (let [datatype     (if (not (nil? data))\n                        (.getSimpleName (class data))\n                        \"\")\n\n         default-colors {;; Blocks closing/opening characters\n                        \"PersistentArrayMap\"  \"\\u001B[0;38;5;241m\"\n                        \"PersistentVector\"    \"\\u001B[0;38;5;241m\"\n                        \"PersistentList\"      \"\\u001B[0;38;5;241m\"\n                        \"PersistentHashSet\"   \"\\u001B[0;38;5;24m\"\n\n                        ;; nil\n                        \"\"          \"\\u001B[0;38;5;170;1m\"\n                        ;; Map values styles\n                        \"String\"     \"\\u001B[0;38;5;222;3m\"\n                        \"Long\"       \"\\u001B[0;38;5;134m\"\n                        \"Double\"     \"\\u001B[0;38;5;144m\"\n                        \"Keyword\"    \"\\u001B[0;38;5;161;1m\"\n                        \"Symbol\"     \"\\u001B[0;38;5;124;1m\"\n                        \"Character\"  \"\\u001B[0;38;5;99;1m\"\n                        \"Ratio\"      \"\\u001B[0;38;5;70;1m\"\n                        \"BigInt\"     \"\\u001B[0;38;5;24;1m\"\n                        \"BigDecimal\" \"\\u001B[0;38;5;111;1m\"}\n\n         colors         (merge default-colors user-colors)\n         reset          \"\\u001B[0m\"]\n\n     (if-let [[_ open-char close-char] (re-matches #\"^(\\{|#\\{|\\[).*(\\]|\\)|\\})$\" (str data))]\n\n       ;; Collections\n       (let [brackets-color (get colors datatype)\n             content (map (fn [elt] (if (instance? clojure.lang.PersistentArrayMap data)\n                                      (str (if (not (= (first data) elt))\n                                             (apply str (repeatedly (+ 0 indent) #(str \" \"))))\n                                           (puts (first elt) user-colors {:indent indent})\n                                           \" \"\n                                           (puts (last elt)\n                                                    user-colors\n                                                    {:indent (+ 2 indent (-> elt first prn-str clojure.string/trim-newline count))})\n                                           (if (and (> (count data) 1)\n                                                    (not (= (last data) elt)))\n                                             \"\\n\\r\"))\n                                      (puts elt user-colors {})))\n                          data)]\n         (str brackets-color open-char\n              (clojure.string/join \" \" content)\n              brackets-color close-char reset))\n\n       ;; Data structures\n       (str (get colors datatype)\n            (-> data prn-str clojure.string/trim-newline)\n            reset)))))"}
